export declare class NovelCovid {
    baseURL: string;
    constructor();
    /**
     * @description Gets all the information from the api.
     * @returns {Promise<All>}
     */
    all(): Promise<All>;
    /**
     * @description Fetches data of corona virus by country.
     * @param {String} [country=null] - Country details you want to fetch.
     * @param {String} sort - Sort by active, deaths , etc.
     * @returns {Promise<ArrayCountry> | null>}
     */
    countries(country?: string | null | number): Promise<Country | null>;
    countries(country: null, sort?: keyof CountrySort): Promise<Array<Country>>;
    /**
     * @description Fetches data of corona virus in United States.
     * @param {String} [state=null] - State name data you wanna fetch.
     * @returns {Promise<void>}
     */
    states(): Promise<Array<State>>;
    states(state: string | null): Promise<State | null>;
    /**
     * @description Get historical data from the start of 2020. (JHU CSSE GISand Data).
     * @param {String} [all=null] - Returns  all the cases and deaths.
     * @param {String} [country=null] -  Returns data of a specific country.
     * @param {String} [province=null] - Get a province within a country's time series.
     * @returns {Promise<Array<Historical> | null>}
     */
    histroical(): Promise<Array<Historical>>;
    histroical(all: boolean | null): Promise<HistoricalAll>;
    histroical(all: null, country?: string | null, province?: string | null): Promise<HistoricalCountry | null>;
    /**
     * @description Return data from the John Hopkins CSSE Data Repository (Provinces and such).
     * @returns {Promise<Array<Jhucsse>>}
     */
    jhucsse(): Promise<Array<Jhucsse>>;
}
export interface All {
    cases: number;
    deaths: number;
    recovered: number;
    updated: number;
    active: number;
}
export interface Country {
    country: string;
    countryInfo: {
        _id: number;
        latitude: number;
        longitue: number;
        flag: string;
        iso3: string;
        iso2: string;
    };
    cases: number;
    todaysCases: number;
    deaths: number;
    recovered: number;
    active: number;
    critical: number;
    casesPerOneMillion: number;
    deathsPerOneMillion: number;
}
export interface State {
    state: string;
    cases: number;
    todayCases: number;
    deaths: number;
    todayDeaths: number;
    active: number;
}
export interface Historical {
    country: string;
    province: string | null;
    timeline: {
        cases: object;
        deaths: object;
    };
}
export interface HistoricalCountry {
    country: string;
    timeline: {
        cases: object;
        deaths: object;
    };
}
export interface Jhucsse {
    country: string;
    province: string | null;
    updatedAt: Date;
    stats: {
        confirmed: number;
        deaths: number;
        recovered: number;
    };
    coordinates: {
        latitude: string;
        longitude: string;
    };
}
export interface CountrySort {
    cases: number;
    todaysCases: number;
    deaths: number;
    recovered: number;
    active: number;
    critical: number;
    casesPerOneMillion: number;
    deathsPerOneMillion: number;
}
export interface HistoricalAll {
    cases: object;
    deaths: object;
    recovere: object;
}
